@using WinInvestmentTracker.Models
@using WinInvestmentTracker.Models.BOLO
@model WinInvestmentTracker.Models.Investment

@{
    ViewBag.Title = "Details";
}

<div>
    <h1><a id="@Html.NameFor(model => model.Name)" data-pk="@Model.ID" data-title="Enter data" data-url="@Url.Action("Update","Investment", new { ID = @Model.ID})">@Model.Name</a></h1>    
    <h4>Investment</h4>    
    <a href="javascript:toggleEditPage()">Edit</a>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            <!-- @Html.DisplayFor(model => model.Description) -->
            <a id="Description" data-pk="@Model.ID" data-title="Enter data" data-type="textarea" data-url="@Url.Action("Update","Investment", new { ID = @Model.ID})">@Model.Description</a>
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Symbol)
        </dt>

        <dd>
            <a id="@Html.NameFor(model => model.Symbol)" data-pk="@Model.ID" data-title="Enter data" data-url="@Url.Action("Update","Investment", new { ID = @Model.ID})">@Model.Symbol</a>
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ValueProposition)
        </dt>

        <dd>
            <a id="@Html.NameFor(model => model.ValueProposition)" data-pk="@Model.ID" data-type="textarea" data-title="Enter data" data-url="@Url.Action("Update","Investment", new { ID = @Model.ID})">@Model.ValueProposition</a>            
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.DesirabilityStatement)
        </dt>

        <dd>
            <a id="@Html.NameFor(model => model.DesirabilityStatement)" data-pk="@Model.ID" data-type="textarea" data-title="Enter data" data-url="@Url.Action("Update","Investment", new { ID = @Model.ID})">@Model.DesirabilityStatement</a>            
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.InitialInvestment)
        </dt>

        <dd>
            <a id="@Html.NameFor(model => model.InitialInvestment)" data-pk="@Model.ID" data-title="Enter data" data-url="@Url.Action("Update","Investment", new { ID = @Model.ID})">@Model.InitialInvestment</a>            
        </dd>
                
        <dt>
            @Html.DisplayNameFor(model => model.Value)
        </dt>

        <dd>
            <a id="@Html.NameFor(model => model.Value)" data-pk="@Model.ID" data-title="Enter data" data-url="@Url.Action("Update","Investment", new { ID = @Model.ID})">@Model.Value</a>            
        </dd>

    </dl>
</div>

<ul class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#factors">Influence Factors</a></li>    
    <li><a data-toggle="tab" href="#risks">Risks</a></li>
    <li><a data-toggle="tab" href="#groups">Groupings</a></li>
    <li><a data-toggle="tab" href="#regions">Regions</a></li>
    <li><a data-toggle="tab" href="#regions">Products &  Services</a></li>
    <li><a data-toggle="tab" href="#regions">Dependencies</a></li>
    <li><a data-toggle="tab" href="#regions">Subsiduaries</a></li>
    <li><a data-toggle="tab" href="#regions">Notes</a></li>
    <li><a data-toggle="tab" href="#regions">Sector & Industry</a></li>
    <li><a data-toggle="tab" href="#regions">Vested interests</a></li>
    <li><a data-toggle="tab" href="#regions">Composition</a></li>
</ul>

<div id="factor_graph">
    <svg></svg>
</div>

<div class="tab-content">
    <div id="factors" class="tab-pane fade in active">
        @{ Html.RenderPartial("_ListFactors", new ParentChildEntityWithHtmlActions<InvestmentInfluenceFactor, Investment>
            {
                Children = Model.Factors.ToList(),
                Parent = Model,
                HtmlActions = new List<HtmlAction>()
                   {
                       new HtmlAction("", "Dissassociate", "DissassociateFactor", "Investment"),

                   }
            });
        }
        
        <p>
            @Html.ActionLink("Add a factor to this investment", "AssociateFactor", "Investment", new { ID = Model.ID }, new { @class = "btn btn-primary" })
        </p>
    </div>
    <div id="risks" class="tab-pane fade">
        @{ Html.RenderPartial("_ListRisks", new ParentChildEntityWithHtmlActions<InvestmentRisk, Investment>
            {
                Children = Model.Risks.ToList(),
                Parent = Model,
                HtmlActions = new List<HtmlAction>()
        {
            new HtmlAction("","Dissassociate","DissassociateRisk","Investment"),

        }
            });
        }
        <p>
            @Html.ActionLink("Add a risk to this investment", "AssociateRisk", "Investment", new { ID = Model.ID }, new { @class = "btn btn-primary" })
        </p>
    </div>
    <div id="groups" class="tab-pane fade">
        @{ Html.RenderPartial("_ListGroups", new ParentChildEntityWithHtmlActions<InvestmentGroup, Investment>
            {
                Children = Model.Groups.ToList(),
                Parent = Model,
                HtmlActions = new List<HtmlAction>()
       {
           new HtmlAction("","Dissassociate","DissassociateGroup","Investment"),

       }
            });
        }
        <p>
            @Html.ActionLink("Add this investment to a group", "AssociateGroup", "Investment", new { ID = Model.ID }, new { @class = "btn btn-primary" })
        </p>
    </div>
    <div id="regions" class="tab-pane fade">
        @{ Html.RenderPartial("_ListRegions", new ParentChildEntityWithHtmlActions<Region, Investment>
            {
                Children = Model.Regions.ToList(),
                Parent = Model,
                HtmlActions = new List<HtmlAction>()
       {
           new HtmlAction("","Dissassociate","DissassociateRegion","Investment"),

       }
            });
        }
        <p>
            @Html.ActionLink("Add this investment to a region", "AssociateRegion", "Investment", new { ID = Model.ID }, new { @class = "btn btn-primary" })
        </p>
    </div>
    
</div>










@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            //$.fn.editable.defaults.mode = 'inline';
            var url = "/odata/Investments";
            
            d3.json(url, handleGraphData);
            var svg_width = 960;
            var svg_height = 300;
            
            var data = {
                "nodes":[
                    { "name": "index", "value": 5},
                    { "name": "about", "value": 5},
                    { "name": "contact", "value": 5},
                    { "name": "store", "value": 8},
                    { "name": "cheese", "value": 8},
                    { "name": "yoghurt", "value": 10},
                    { "name": "milk", "value": 2}
                    ],
                    "links":[
                    {"source":0,"target":1,"value":25},
                    {"source":0,"target":2,"value":10},
                    {"source":0,"target":3,"value":40},
                    {"source":1,"target":2,"value":10},
                    {"source":3,"target":4,"value":25},
                    {"source":3,"target":5,"value":10},
                    {"source":3,"target":6,"value":5},
                    {"source":4,"target":6,"value":5},
                    {"source":4,"target":5,"value":15}
                ]
            }

            var svg = d3.select("svg").attr("height", svg_height).attr("width", svg_width);
            var createdLinks = svg.selectAll("line.link").data(data.links).enter().append("line").attr("class", "link").attr("stroke", "black").style("opacity", function (d) { return d.value }).style("stroke-width", function(d){});
            var createdNodes = svg.selectAll("g.node").data(data.nodes).enter().append("g").attr("class", "node");
            var createdCircles = createdNodes.append("circle").attr("r", function(d) { return d.value; }).style("fill", "lightgray").style("stroke", "black").style("stroke-width", "1px");
            var createdLabels = createdNodes.append("text").style("text-anchor", "middle").attr("y", 15).text(function(d) {return d.name;});

            var force = d3.layout.force()
                .charge(-1000)
                .size([svg_width, svg_height])
                .nodes(data.nodes)
                .links(data.links)
                .gravity(0.1)
                .linkDistance(50)
                .on("tick", forceTick);

            // Make it dragable
            d3.selectAll("g.node").call(force.drag());
            force.start();
            

            function forceTick() {
                d3.selectAll("line.link")
                    .attr("x1", function (d) {return d.source.x;})
                    .attr("x2", function (d) {return d.target.x;})
                    .attr("y1", function (d) {return d.source.y;})
                    .attr("y2", function (d) {return d.target.y;});
                
                d3.selectAll("g.node")
                    .attr("transform",
                        function(d) {
                            return "translate(" + d.x + "," + d.y + ")";
                        });

            }


            function handleGraphData(error, graph) {
                
            } // handleGraphData
        });
        function toggleEditPage() {
            $('#@Html.NameFor(model => model.Name)').editable();
            $('#@Html.NameFor(model => model.Description)').editable();
            $('#@Html.NameFor(model => model.ValueProposition)').editable();
            $('#@Html.NameFor(model => model.Symbol)').editable();
            $('#@Html.NameFor(model => model.DesirabilityStatement)').editable();
            $('#@Html.NameFor(model => model.Value)').editable();
            $('#@Html.NameFor(model => model.InitialInvestment)').editable();
            }
    </script>
}

